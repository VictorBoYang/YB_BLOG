import { popperGenerator } from "@popperjs/core/lib";
import detectOverflow from "@popperjs/core/lib/utils/detectOverflow";
export * from "@popperjs/core/lib/types";
declare const defaultModifiers: (import("@popperjs/core/lib/types").Modifier<"popperOffsets", {}> | import("@popperjs/core/lib/types").Modifier<"flip", import("@popperjs/core/lib/modifiers/flip").Options> | import("@popperjs/core/lib/types").Modifier<"hide", {}> | import("@popperjs/core/lib/types").Modifier<"offset", import("@popperjs/core/lib/modifiers/offset").Options> | import("@popperjs/core/lib/types").Modifier<"eventListeners", import("@popperjs/core/lib/modifiers/eventListeners").Options> | import("@popperjs/core/lib/types").Modifier<"computeStyles", import("@popperjs/core/lib/modifiers/computeStyles").Options> | import("@popperjs/core/lib/types").Modifier<"arrow", import("@popperjs/core/lib/modifiers/arrow").Options> | import("@popperjs/core/lib/types").Modifier<"preventOverflow", import("@popperjs/core/lib/modifiers/preventOverflow").Options> | import("@popperjs/core/lib/types").Modifier<"applyStyles", {}>)[];
declare const createPopper: <TModifier extends Partial<import("@popperjs/core/lib/types").Modifier<any, any>>>(reference: Element | import("@popperjs/core/lib/types").VirtualElement, popper: HTMLElement, options?: Partial<import("@popperjs/core/lib/types").OptionsGeneric<TModifier>>) => import("@popperjs/core/lib/types").Instance;
export { createPopper, popperGenerator, defaultModifiers, detectOverflow };
